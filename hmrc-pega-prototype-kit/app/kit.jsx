// DO NOT EDIT THIS FILE
// THIS FILE CONTAINS COMPONENTS TO BE ABSTRACTED AWAY BY THE KITT

import config from './config.json';
import ReactDOM from "react-dom";
import { Link as ReactLink, Route, RouterProvider } from "react-router-dom";
import { createBrowserRouter, createRoutesFromElements } from 'react-router-dom';
import { Configuration, AppShell, Avatar, Icon, Link, Grid, Flex, WideNarrowPage, SummaryList, SummaryItem, MenuButton, Tabs, FieldValueList, Status } from "@pega/cosmos-react-core";

export const HMRCRoute = Route

export function HMRCLink({ children, href }) {
  return ( 
    <ReactLink to={href} style={{ textDecoration: "none" }}>
      <Link>{children}</Link>
    </ReactLink>
  )
}

export function setupHMRCPegaApp({ routes }) {
  ReactDOM.render(
    <HMRCShell>
      <RouterProvider 
        router={
          createBrowserRouter(
            createRoutesFromElements(routes)
          )
        }
      />
    </HMRCShell>, 
    document.querySelector("[data-root]")
  );
} 

export function HMRCShell({ children }) {
  return ( 
    <Configuration theme={config.theme}>
      <AppShell
        appHeader
        appInfo={{
          imageSrc: "/assets/HMRC-logo.png",
          appName: config.serviceName,
        }}
        searchInput={{}}
        operator={{
          name: "Prototype",
          actions: [],
          avatar: (
            <Avatar
              icon="user-solid"
              backgroundColor="white"
            />
          ),
        }}
        main={children}
        cases={
          [
            { primary: "Dispute Transaction", visual: <Icon name="case-solid" /> }, 
            { primary: "Refund", visual: <Icon name="money-send-solid" /> },
            { primary: "Explore Data", visual: <Icon name="search-analytics" /> }
          ]
        }
        caseTypes={
          [
            { name: "Dispute Transaction" },
            { name: "Refund" }
          ]
        }
      />
    </Configuration>
  )
}

export function CHBDemoPage() {
  return (
    <Grid
      container={{ cols: "1fr" }}
      md={{ container: { cols: "0.3fr 1fr" }}}
      style={{ height: "calc(100vh - var(--appshell-offset,0))" }}
    >
      <Flex
        container={{ direction: "column" }}
        style={{ backgroundColor: "white" }}
      >
        <SummaryItem 
          as="header"
          style={{ background: "#036666", padding: "1rem", color: "white" }}
          primary={<h1 style={{ fontSize: "1rem" }}>Jake Ord</h1>}
          secondary={<p>D-31</p>}
          visual={<Icon name='case-solid' background='white' />}
          actions={
            <Flex>
              <MenuButton
                text='Edit'
                variant='simple'
                icon='pencil-solid'
                iconOnly
                menu={{
                  items: ['Option Number 1', 'Option Number 2', 'Option Number 3'].map(name => ({
                    id: name,
                    primary: name
                  }))
                }}
              />
               <MenuButton
                text='Options'
                variant='simple'
                icon='more'
                iconOnly
                menu={{
                  items: ['Follow', 'Edit details', 'Change stage'].map(name => ({
                    id: name,
                    primary: name
                  }))
                }}
              />
            </Flex>
          }
        />

        <Flex container={{ direction: "column", gap: 2, pad: 2 }}>
          <FieldValueList 
            fields={[
              { variant: "stacked", name: "Urgency", value: "10" },
              { variant: "stacked", name: "Work status", value: <Status variant="info">NEW</Status>}
            ]}
          />
          <FieldValueList
            fields={[
              { name: "Created", value: <><HMRCLink href="#">Author</HMRCLink> 6 minutes ago</> },
              { name: "Updated", value: <><HMRCLink href="#">Author</HMRCLink> 4 minutes ago</> },
            ]}
          />
        </Flex>

        <Tabs 
          type="vertical"
          currentTabId="child-details"
          tabs={[
            { id: "child-details", name: "Child details" },
            { id: "relationship-details", name: "Relationship details" },
            { id: "case-details", name: "Case details" }
          ]}
        />
      </Flex>
      <WideNarrowPage
        title="awd"
        a={<SummaryList items={[{ id: 'awd', primary: 'awdaw' }]}  />}
        b={"awd"}
      />
    </Grid>
  )
}